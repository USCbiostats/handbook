[
["index.html", "USC biostats R Handbook 1 Welcome", " USC biostats R Handbook Emil Hvitfeldt Spring 2019 1 Welcome TODO How to contribute "],
["coding-standards.html", "2 Coding Standards 2.1 General overview 2.2 Helpful suggestions", " 2 Coding Standards This chapter will outline standards we aim to adhere to. In addition to these standards will be some suggestions on best practices we hopes you will find useful. 2.1 General overview Try to keep your code to less then 80 characters per line. This will improve visibility as the code willm fit on your screen when you are working. If you are using Rstudio, you can add a visual marker on the 80 character line. Click Rstudio -&gt; Preferences -&gt; Code -&gt; display -&gt; Show margin. document your code. Explain yourself. Each function should have acommpanying documentation explaning what it is doing. This will help other people understand what your code is doing without having to look at the code indside the function. Notice that “other people” also describes “future you”. Use white space for indenting, 2 characters. When possible, structure your code as sections/files, with files holding similar functions and sections to give internal structure to your file. Include a informative README in each project. 2.2 Helpful suggestions Use a integrated development environment (IDE). We recommend https://www.rstudio.com/. TODO explain what the benefits of using a IDE. If you are looking for a coding style, then the The tidyverse style guide is a good place to start. "],
["building-a-r-package.html", "3 Building a R package 3.1 Resources", " 3 Building a R package 3.1 Resources https://r-pkgs.org/ https://www.hvitfeldt.me/blog/usethis-workflow-for-package-development/ https://usethis.r-lib.org/ https://www.rstudio.com/resources/videos/you-can-make-a-package-in-20-minutes/ https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/ https://cran.r-project.org/doc/manuals/r-release/R-exts.html https://ropensci.github.io/dev_guide/ "],
["parallel-computing.html", "4 Parallel computing 4.1 Introduction 4.2 What is parallel computing, anyway? 4.3 When is it a good idea? 4.4 Fundamentals 4.5 Parallel computing in R 4.6 parallel example 2: Simulating \\(\\pi\\)", " 4 Parallel computing Before starting, be advice that this chapter is in continuous work-in-progress mode, which translates in potential changes in the ordering of the sections, availability of contents, etc. 4.1 Introduction In this chapter we will introduce the reader to parallel computing using R. In particular, we will take a general overview on what is parallel computing, how can it benefit us, and how can it be used in R. The rest of this chapter develops under the assumption that the reader has some level of knowledge about R fundamentals (types of objects, functions, etc.). 4.2 What is parallel computing, anyway? In very simple terms, parallel computing is all about making things running faster. More concrete, while there are plenty ways of accelerating calculations, parallel computing is all about doing multiple things simulateneously. Sequential computing, on the other hand, is what we usually see in R. When we make a call to a function, most of the time R is doing calculations using a single processor. While this may not be a problem if your call takes just a couple of seconds, it may be critical if, for example, the program needs to make a significant number of such calls, say 1,000, in order to be completed. While not a general rule, most of the time computationally intensive programs can be splitted in such a way that its components can be executed in a isolated way, this is, without rellying in the other parts to be completed. For example, suppose that you have a function that takes a number and multiplies it by 2, let’s call it f: f &lt;- function(n) n*2 In R, this simple function can be applied seemesly to a vector, for example: x &lt;- 1:4 f(x) ## [1] 2 4 6 8 If we were able to see how calculations are taking place in R, we could represent this in the following way: Here we are using a single core. The function is applied one element at a time, leaving the other 3 cores without usage. Now, in a parallel computing setting, the same function can be applied simulatenously to multiple elements of x, as in the following figure, where the number of cores matches the number of elements/tasks that need to be processed: In this more intelligent way of computation, we are taking full advantage of our computer by using all 4 cores at the same time. This will translate in a reduced computation time which, in the case of complicated/long calculations, can be an important speed gain. In principle, this implementation of the function f should take 1/4 of what the original version takes to be applied to x. As the number of function calls increases, or in other words, as the complexity in terms of computational time increases, it makes sense to start thinking about parallel computing. This takes us to the next section. 4.3 When is it a good idea? Parallel computing sounds great, but is it always a good idea to try to parallelize your program? The answer is no. A lot of times we feel pushed towards writing the code as efficient as possible. Moreover, this is a known problem among software developers, see for example this hilarious reply on Stackoverflow regarding “bets comment in source code”1: // // Dear maintainer: // // Once you are done trying to &#39;optimize&#39; this routine, // and have realized what a terrible mistake that was, // please increment the following counter as a warning // to the next guy: // // total_hours_wasted_here = 42 // While optimizing a program may be important in some cases, time constraints and redability may be more important in relative terms. As a rule of thumb, you will only want to optimize your code if by doing so the potential speed gains are worthwhile, for example, reducing computation speed to half of the original time in a algorithm that takes more than just a few seconds. Other examples include: Good idea when: You are writing a log-likelihood Function that you need to maximize. Solvers take, for example, at least 5 calls to the objective function so it makes sense to speed up the call. Even more relevant than a simple optimization, if the function needs to be called thousands of times like in a MCMC algorithm, then it definetly makes sense to improve speed. You are processing chunks of data in which each requires a significant amount of time to be processed. Bad idea when: The section of the program that you want to speed up already takes a relatively small time to be completed, for example, a few seconds or a fraction of a second. The section of the program you are trying to optimize is not the the actual bottle neck of the program2 If your computational problem is reasonable enought to think about code optimization, and furthermore, implementing parallel computing, then the following diagram should be a useful guide to follow: Ask yourself these questions before jumping into HPC! If your problem reached the part in which it can be parallelized but there are no tools around for you to use, keep reading, otherwise move to the next chapter and don’t come back until you have a problem worthy enough to be dealt with parallel computing… just kidding. 4.4 Fundamentals Before jumping into HPC with R, let’s take a look at some concepts that are fundamental for the rest of the chapter. 4.4.1 Types of parallelisms A nice way to look at types of computation is through Flynn’s taxonomy: Flynn’s Classical Taxonomy. Source: Introduction to Parallel Computing, Blaise Barney, Lawrence Livermore National Laboratory (website) 4.4.2 What you need to know about Hardware One important thing to know is how many resources we have, and resources can be very different accross systems. In general, we can talk about a computer’s processing unit, CPU, as a collection of cores which are grouped/arranged in sockets. More over, modern CPUs such as those built by intel have what they call multithreaded technology, which in raw terms means a single physical core behaving as multiple ones. The following figure shows a nice illustration of this: Taxonomy of CPUs (Downloaded from de https://slurm.schedmd.com/mc_support.html) Now, how many cores does your computer has, the parallel package can tell you that: parallel::detectCores() ## [1] 4 4.4.3 HPC in R Loosely, from R’s perspective, we can think of HPC in terms of two, maybe three things: Big data: How to work with data that doesn’t fit your computer Parallel computing: How to take advantage of multiple core systems Compiled code: Write your own low-level code (if R doesn’t has it yet…) In the case of Big Data, some solutions include: Buy a bigger computer/RAM memory (not the best solution!) Use out-of-memory storage, i.e., don’t load all your data in the RAM. e.g. The bigmemory, data.table, HadoopStreaming R packages Store it more efficiently, e.g.: Sparse Matrices (take a look at the dgCMatrix objects from the Matrix R package) 4.5 Parallel computing in R As mentioned earlier, R was not designed to work with parallel computing out-of-the-box. While there are some ways to go around this such as: Obtaining the R version owned by Microsoft (Microsoft R Open), which has some features, and in particular, linear algebra routines compiled in parallel; Compiling R with BLAS allowing for parallel computing (a couple of examples here and here); Getting the opensource version pqR (pretty quick R, which at the writing of this has a stable release published on February 19th, 2019); When it comes to use “normal” R, there are several alternatives (just take a look at the High-Performance Computing Task View). Here we will focus on the following R-packages/tools for explicit parallelism: parallel: R package that provides ‘[s]upport for parallel computation, including random-number generation’. RcppArmadillo + OpenMP RcppArmadillo: ‘Armadillo is a C++ linear algebra library, aiming towards a good balance between speed and ease of use.’ ‘[RcppArmadillo] brings the power of Armadillo to R.’ OpenMP: ‘Open Multi-Processing is an application programming interface (API) that supports multi-platform shared memory multiprocessing programming in C, C++, and Fortran, on most platforms, processor architectures and operating systems, including Solaris, AIX, HP-UX, Linux, macOS, and Windows.’ (Wiki) Implicit parallelism, on the other hand, are out-of-the-box tools that allow the programmer not to worry about parallelization, e.g. such as gpuR for Matrix manipulation using GPU. 4.5.1 The parallel package Create a cluster: PSOCK Cluster: makePSOCKCluster: Creates brand new R Sessions (so nothing is inherited from the master), even in other computers! Fork Cluster: makeForkCluster: Using OS Forking, copies the current R session locally (so everything is inherited from the master up to that point). Not available on Windows. Other: makeCluster passed to snow Copy/prepare each R session: Copy objects with clusterExport Pass expressions with clusterEvalQ Set a seed Do your call: mclapply, mcmapply if you are using Fork parApply, parLapply, etc. if you are using PSOCK Stop the cluster with clusterStop 4.5.2 parallel example 1: Parallel RNG # 1. CREATING A CLUSTER library(parallel) cl &lt;- makePSOCKcluster(2) # 2. PREPARING THE CLUSTER clusterSetRNGStream(cl, 123) # Equivalent to `set.seed(123)` # 3. DO YOUR CALL ans &lt;- parSapply(cl, 1:2, function(x) runif(1e3)) (ans0 &lt;- var(ans)) # [,1] [,2] # [1,] 0.0861888293 -0.0001633431 # [2,] -0.0001633431 0.0853841838 # I want to get the same! clusterSetRNGStream(cl, 123) ans1 &lt;- var(parSapply(cl, 1:2, function(x) runif(1e3))) ans0 - ans1 # A matrix of zeros # [,1] [,2] # [1,] 0 0 # [2,] 0 0 # 4. STOP THE CLUSTER stopCluster(cl) In the case of makeForkCluster # 1. CREATING A CLUSTER library(parallel) # The fork cluster will copy the -nsims- object nsims &lt;- 1e3 cl &lt;- makeForkCluster(2) # 2. PREPARING THE CLUSTER RNGkind(&quot;L&#39;Ecuyer-CMRG&quot;) set.seed(123) # 3. DO YOUR CALL ans &lt;- do.call(cbind, mclapply(1:2, function(x) { runif(nsims) # Look! we use the nsims object! # This would have fail in makePSOCKCluster # if we didn&#39;t copy -nsims- first. })) (ans0 &lt;- var(ans)) # [,1] [,2] # [1,] 0.08538418 0.00239079 # [2,] 0.00239079 0.08114219 # Same sequence with same seed set.seed(123) ans1 &lt;- var(do.call(cbind, mclapply(1:2, function(x) runif(nsims)))) ans0 - ans1 # A matrix of zeros # [,1] [,2] # [1,] 0 0 # [2,] 0 0 # 4. STOP THE CLUSTER stopCluster(cl) 4.6 parallel example 2: Simulating \\(\\pi\\) We know that \\(\\pi = \\frac{A}{r^2}\\). We approximate it by randomly adding points \\(x\\) to a square of size 2 centered at the origin. So, we approximate \\(\\pi\\) as \\(\\Pr\\{\\|x\\| \\leq 1\\}\\times 2^2\\) The R code to do this pisim &lt;- function(i, nsim) { # Notice we don&#39;t use the -i- # Random points ans &lt;- matrix(runif(nsim*2), ncol=2) # Distance to the origin ans &lt;- sqrt(rowSums(ans^2)) # Estimated pi (sum(ans &lt;= 1)*4)/nsim } # Setup cl &lt;- makePSOCKcluster(10) clusterSetRNGStream(cl, 123) # Number of simulations we want each time to run nsim &lt;- 1e5 # We need to make -nsim- and -pisim- available to the # cluster clusterExport(cl, c(&quot;nsim&quot;, &quot;pisim&quot;)) # Benchmarking: parSapply and sapply will run this simulation # a hundred times each, so at the end we have 1e5*100 points # to approximate pi rbenchmark::benchmark( parallel = parSapply(cl, 1:100, pisim, nsim=nsim), serial = sapply(1:100, pisim, nsim=nsim), replications = 1 )[,1:4] # test replications elapsed relative # 1 parallel 1 0.302 1.000 # 2 serial 1 1.556 5.152 ans_par &lt;- parSapply(cl, 1:100, pisim, nsim=nsim) ans_ser &lt;- sapply(1:100, pisim, nsim=nsim) stopCluster(cl) # par ser R # 3.141561 3.141247 3.141593 4.6.1 Speedup things with Rcpp + OpenMP Read the original post (now closed) here.↩ For more about how to identify code bottlenecks, take a look at the Profilinf section of this book here.↩ "],
["testing.html", "5 Testing", " 5 Testing "],
["profile-benchmark.html", "6 Profiling and benchmarking 6.1 Introduction 6.2 Profiling 6.3 Benchmarking 6.4 Additional resources", " 6 Profiling and benchmarking 6.1 Introduction This chapter will introduce the the concepts of profiling and benchmarking. These concepts are universal withing programming . This chapter will focus on its practical implementation and usage in the R programming language. The overall goal of these techniques is to measure the performance of the code you have written. Remember this is a measure of speed, not a measure of correctness. 6.2 Profiling Profiling is the act of measuring the run-time of each line of code you have run. Knowing where the time is being spend in your code is beneficial as it is a good indication of where you should spend your time optimizing. In general you want to look for small areas that take up most of the time (also called a “bottleneck”) and focus on those before other parts. There is little reason to spend time optimizing a piece of code that only take up 0.1% of the time when you could work at a piece that takes up 70% of the time. We will use the the profvis package to do profiling. It have a couple of different ways of interacting. In the first one you load the profvis package and then you wrap the code you want to profile in profvis({ and }) as shown below show below. library(profvis) profvis({ data &lt;- runif(1e7) # Three different ways of getting the square root square_root &lt;- sqrt(data) square_root &lt;- data ^ (1/2) square_root &lt;- exp(1) ^ (1/2 * log(data)) }) Another way if you are using the Rstudio IDE, comes from the navigation bar where you can access the profiling tool. Figure 6.1: Profile location in Rstudio IDE navigation bar. Clicking this tab reveals the following actions: “Profile selected line(s)” “Start profiling” &amp; “Stop profiling” Figure 6.2: Profiling actions. Being able to profile selected lines of code is great if you have a short and compact piece of code that easily can be highlighted and tested. On the other hand is the ability start and stop the profiling whenever you want a powerful tool. In addition to being able to profile code from different areas, you are also able to stop profiling before the code is done executing, which you aren’t able to in the previous 2 methods. This is useful if you want to profile a snapshot of a long-running simulation as it can have very consistent behavior since it is running the same thing millions of time. No matter which of the three way you do your profile you will be presented with a page with a frame-graph Figure 6.3: profvis output showing source on top and flame graph below. This interactive panel shows how much time and memory is being spend on each line of code. From here you should be able to identify Another useful view can be found by clicking on the “data” tab at the top. This shows how long time is being spend in each expression. We can see in this example that the power operator ^ is taking the majority of the time. Figure 6.4: profvis data view showcases results by expresion in stead of by line. 6.2.1 Troubleshooting Sometimes when you are using profvis you will see the error Error in parse_rprof(prof_output, expr_source) : No parsing data available. Maybe your function was too fast? This is because your code finished running before profvis was able to detect it. This might feel like good news, but it can make it difficult to profile very fast functions. To profile a fast function you simply let it run a lot of times. This can easily be done by putting it inside a for-loop. You change this profvis({ data &lt;- c(3, 7, 2) super_fast_function(data) }) to profvis({ data &lt;- c(3, 7, 2) for (i in 1:1000) { super_fast_function(data) } }) where you increase the number until it is run enough for the profiler to catch it. 6.3 Benchmarking Measuring how long something takes is a simple skill that will become invaluable once you start to focus on making your code faster. Simply put, if you can’t measure how fast something is you don’t know if it is going any faster. This section will be broken into 2 sections benchmarking slow code and, benchmarking fast code. In this content slow is something that takes seconds, minutes, hours or more. It is a situation where you could use a conventional stopwatch. Fast is anything faster, it is used in the context where you have two pieces of code you think does the same and you want to find out which one is faster. 6.3.1 Slow code First we need to create a function to benchmark, here we will use this simple recursive formula for the fibonacci sequence. This function doesn’t scale well with n so it will be perfect for these examples. fibonacci &lt;- function(n) { if(n == 0) { return(0) } if(n == 1) { return(1) } fibonacci(n - 1) + fibonacci(n - 2) } Using system.time() is classic way to measure how long something takes, simple wrap the code you want to time between system.time({ and }). system.time({ fibonacci(32) }) ## user system elapsed ## 2.784 0.008 2.791 The first two numbers are the are the total user and system CPU times of the current R process and any child processes on which it has waited, and the third entry is the ‘real’ elapsed time since the process was started. An alternative with the same functionality from the bench package is the function system_time(). library(bench) system_time({ fibonacci(32) }) ## process real ## 2.57s 2.57s where the two values are process - The process CPU usage of the expression evaluation. real - The wall clock time of the expression evaluation. Another great tool is the tictoc package. Simply call tic() when to start recording and toc() to end recording. library(tictoc) tic() x &lt;- fibonacci(32) toc() ## 2.83 sec elapsed In addition does this package extend the timing functionality in such a way that we are able to measure times in nested context. In the following example we are generating some data and fitting a model. Calling tic() another time before the toc() allows us to measure subsections of the whole. library(tictoc) tic(&quot;Total&quot;) tic(&quot;Data Generation&quot;) X &lt;- matrix(rnorm(5000 * 1000), 5000, 1000) b &lt;- sample(1:1000, 1000) y &lt;- runif(1) + X %*% b + rnorm(5000) toc() tic(&quot;Model Fitting&quot;) model &lt;- lm(y ~ X) toc() toc() ## Data Generation: 0.404 sec elapsed ## Model Fitting: 4.97 sec elapsed ## Total: 5.377 sec elapsed This can be useful if you want to be able to time the overall script as well as parts of it. Notice how each timing is named. 6.3.2 Fast code - microbenchmarking Here we will look at the what happens when we want to compare two expressions to see which one is faster. We will use the bench package again. Suppose we would like to determine the fastest way of calculating the variance of a selection of numbers. We use the mark() function from the bench and insert 2 or more expressions we would like to test against each other. These expressions are then run a lot of times and the summary statistics of the times are given as a result. library(bench) x &lt;- rnorm(1000) bench::mark( var(x), cov(x, x) ) ## # A tibble: 2 x 10 ## expression min mean median max `itr/sec` mem_alloc n_gc n_itr ## &lt;chr&gt; &lt;bch:&gt; &lt;bch:&gt; &lt;bch:&gt; &lt;bch&gt; &lt;dbl&gt; &lt;bch:byt&gt; &lt;dbl&gt; &lt;int&gt; ## 1 var(x) 29.1µs 34.5µs 32.9µs 209µs 28998. 13.7KB 7 9993 ## 2 cov(x, x) 53.3µs 64µs 59.2µs 353µs 15632. 47.5KB 10 7404 ## # … with 1 more variable: total_time &lt;bch:tm&gt; mark() also checks that all the expressions return the same output as a sanity check. Notice the units 1 ms, then one thousand calls takes a second. 1 µs, then one million calls takes a second. 1 ns, then one billion calls takes a second. 6.4 Additional resources https://adv-r.hadley.nz/perf-measure.html Chapter on “Measuring performance” from Advanced R by Hadley Wickham. Covers more or less the same topics as this chapter but with more examples and greater details, great next step for reading. "]
]
