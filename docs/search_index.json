[
["index.html", "USC biostats R Handbook 1 Welcome", " USC biostats R Handbook Emil Hvitfeldt 2019-03-19 1 Welcome TODO How to contribute "],
["coding-standards.html", "2 Coding Standards 2.1 General overview 2.2 Helpful suggestions", " 2 Coding Standards This chapter will outline standards we aim to adhere to. In addition to these standards will be some suggestions on best practices we hopes you will find useful. 2.1 General overview Try to keep your code to less then 80 characters per line. This will improve visibility as the code willm fit on your screen when you are working. If you are using Rstudio, you can add a visual marker on the 80 character line. Click Rstudio -&gt; Preferences -&gt; Code -&gt; display -&gt; Show margin. document your code. Explain yourself. Each function should have acommpanying documentation explaning what it is doing. This will help other people understand what your code is doing without having to look at the code indside the function. Notice that “other people” also describes “future you”. Use white space for indenting, 2 characters. When possible, structure your code as sections/files, with files holding similar functions and sections to give internal structure to your file. Include a informative README in each project. 2.2 Helpful suggestions Use a integrated development environment (IDE). We recommend https://www.rstudio.com/. TODO explain what the benefits of using a IDE. If you are looking for a coding style, then the The tidyverse style guide is a good place to start. "],
["building-a-r-package.html", "3 Building a R package", " 3 Building a R package "],
["parallel-computing.html", "4 Parallel computing 4.1 What is parallel computing, anyway? 4.2 High-Performance Computing: An overview 4.3 Big Data 4.4 CPU/Core/Threads 4.5 When is it a good idea?", " 4 Parallel computing 4.1 What is parallel computing, anyway? Serial (sequential) computing consists on doing one thing at a time. For example, suppose that you have a function that can be applied in a vectorized fashion, let’s call it f() and a vector with four elements which we will call x. Using sequential computing, the function will be applied one element at a time, making use of a single core as shown in the figure below: Here we are using a single core. The function is applied one element at a time, leaving the other 3 cores without usage. Now, in a parallel computing setting, the same function can be applied simulatenously to multiple elements of x, as in the following figure, where the number of cores matches the number of elements/tasks that need to be processed: In this more intelligent way of computation, we are taking full advantage of our computer by using all 4 cores at the same time. This will translate in a reduced computation time which, in the case of complicated/long calculations, can be an important speed gain. Parallel computing is specially important when it comes to perform a computationally intensive task such as: Simulations MCMC Cross-validation Processing big chunks of data Among others. 4.2 High-Performance Computing: An overview Loosely, from R’s perspective, we can think of HPC in terms of two, maybe three things: Big data: How to work with data that doesn’t fit your computer Parallel computing: How to take advantage of multiple core systems Compiled code: Write your own low-level code (if R doesn’t has it yet…) 4.3 Big Data Buy a bigger computer/RAM memory (not the best solution!) Use out-of-memory storage, i.e., don’t load all your data in the RAM. e.g. The bigmemory, data.table, HadoopStreaming R packages Store it more efficiently, e.g.: Sparse Matrices (take a look at the dgCMatrix objects from the Matrix R package) Flynn’s Classical Taxonomy. Source: Introduction to Parallel Computing, Blaise Barney, Lawrence Livermore National Laboratory (website) 4.4 CPU/Core/Threads One important thing to know is how many resources we have, and resources can be very different accross systems. In general, we can talk about a computer’s processing unit, CPU, as a collection of cores which are grouped/arranged in sockets. More over, modern CPUs such as those built by intel have what they call multithreaded technology, which in raw terms means a single physical core behaving as multiple ones. The following figure shows a nice illustration of this: Taxonomy of CPUs (Downloaded from de https://slurm.schedmd.com/mc_support.html) Now, how many cores does your computer has, the parallel package can tell you that: parallel::detectCores() ## [1] 4 4.5 When is it a good idea? Ask yourself these questions before jumping into HPC! "],
["testing.html", "5 Testing", " 5 Testing "],
["profiling-and-benchmarking.html", "6 Profiling and benchmarking", " 6 Profiling and benchmarking "]
]
